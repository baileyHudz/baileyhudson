// CampusCardUsers.h
#ifndef CAMPUSCARDUSERS_H
#define CAMPUSCARDUSERS_H

#include <iostream>
#include <vector>
#include <string>
#include <algorithm> 

class CampusCardUsers {
public:
    // Define a struct to represent a user with user name and user type.
    struct User {
        std::string username;
        std::string userType;
    };

protected:
    // Vector to store the collection of users.
    std::vector<User> users;

public:
    void displayUserTypes() const;

    // Displays the list of users or a message if no users 
    void displayUserList() const;

    // Adds a new user to the vector of users.
    void addUser(const std::string& username, const std::string& userType);

    // Updates the user type for an existing user.
    void updateUser(const std::string& username, const std::string& newUserType);

    // Removes a user with the specified user name from the vector.
    void removeUser(const std::string& username);

    const std::vector<User>& getUsers() const;

    void campusCardUsersMenu();
};

#endif
// CampusCardUsers.cpp
#include "CampusCardUsers.h"

// Returns a const reference to the vector of users.
const std::vector<CampusCardUsers::User>& CampusCardUsers::getUsers() const {
    return users;
}

// Displays the types of users available.
void CampusCardUsers::displayUserTypes() const {
    // Prints out the available user types.
    std::cout << "1. Staff Member" << std::endl;
    std::cout << "2. Student" << std::endl;
    std::cout << "3. Visitor / Guest" << std::endl;
    std::cout << "4. Contract Cleaner" << std::endl;
    std::cout << "5. Manager" << std::endl;
    std::cout << "6. Security" << std::endl;
    std::cout << "7. Emergency Responder" << std::endl;
}

// Displays the list of users or a message if no users are present.
void CampusCardUsers::displayUserList() const {
    if (users.empty()) {
        std::cout << "No users are currently saved." << std::endl;
    }
    else {
        // If there are users print their user name and user type.
        std::cout << "User List" << std::endl;
        for (const auto& user : users) {
            std::cout << user.username << " - " << user.userType << std::endl;
        }
    }
}
